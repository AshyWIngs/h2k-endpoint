# === h2k-endpoint: логирование в stdout для journald ===
# sane-defaults: rootLogger=INFO, наш пакет kz.qazmarka.h2k=INFO
# Для тонкой отладки используйте комментированные переключатели DEBUG ниже или настройте DEBUG в log4j.properties HBase.
# Короткий шаблон без timestamps/threads (journald их добавит сам). Для разовой диагностики см. альтернативный шаблон ниже.
# Консоль — единственный активный аппендер по умолчанию; ротация файлов отключена.
log4j.appender.h2k_stdout=org.apache.log4j.ConsoleAppender
log4j.appender.h2k_stdout.encoding=UTF-8
log4j.appender.h2k_stdout.layout=org.apache.log4j.PatternLayout
# log4j.appender.h2k_stdout.layout.ConversionPattern=%-5p %c{1} - %m%n
# Диагностический шаблон (для временного включения при расследованиях):
# log4j.appender.h2k_stdout.layout.ConversionPattern=%-5p %c{1} %X{table} %X{region} - %m%n
# log4j.appender.h2k_stdout.Threshold=INFO

# --- Диагностичный шаблон с метками MDC и временем/потоком
# было:
# log4j.appender.h2k_stdout.layout.ConversionPattern=%-5p %c{1} - %m%n
# стало:
log4j.appender.h2k_stdout.layout.ConversionPattern=%d{ISO8601} %-5p %c{1} [%t] %X{table} %X{cf} %X{region} - %m%n

# пускаем DEBUG-сообщения на консоль (чтобы не резались аппендером)
# было: log4j.appender.h2k_stdout.Threshold=INFO
log4j.appender.h2k_stdout.Threshold=INFO

# Более читабельные стектрейсы (Log4j 1.2.17+)
log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer
# Явно включаем немедленный флэш для консоли (на всякий случай)
log4j.appender.h2k_stdout.ImmediateFlush=true

# === Корневой логгер по умолчанию ===
# Держим INFO на корне; подробности включаем точечно для наших пакетов.
log4j.rootLogger=INFO,h2k_stdout

# (Опционально) приглушить шум от Kafka AppInfoParser (MBean). Раскомментируйте при необходимости.
# log4j.logger.org.apache.kafka.common.utils.AppInfoParser=ERROR

# === Уровни логирования (шум гасим, наши сообщения — по делу) ===
# Наш пакет по умолчанию — INFO. Всё детальное уводим в DEBUG точечно по классам ниже.
log4j.logger.kz.qazmarka.h2k=INFO,h2k_stdout
log4j.additivity.kz.qazmarka.h2k=false

# --- Точечный DEBUG по нашим ключевым классам ---
# какой endpoint/какие producer props/какая cf и др.
log4j.logger.kz.qazmarka.h2k.endpoint.KafkaReplicationEndpoint=DEBUG
# расчёт payload, итоговый набор ключей и порядок
log4j.logger.kz.qazmarka.h2k.payload.PayloadBuilder=DEBUG
# декодирование Phoenix-типов и маппинг колонок
log4j.logger.kz.qazmarka.h2k.schema.ValueCodecPhoenix=DEBUG
# извлечение PK из rowkey (если есть класс RowKeySlice в пакете schema)
log4j.logger.kz.qazmarka.h2k.util.RowKeySlice=DEBUG
# итоговая собранная конфигурация (чтобы видеть includeRowKey/includeMeta и т.п.)
log4j.logger.kz.qazmarka.h2k.config.H2kConfig=DEBUG

# при необходимости (если используем registry/schema.json-путь в Phoenix-режиме)
log4j.logger.kz.qazmarka.h2k.schema.JsonSchemaRegistry=DEBUG

# оставляем остальное как есть (Kafka/ZK/Hadoop/Phoenix = WARN)

# Тише сторонние библиотеки (можно поднять до INFO при расследованиях)
log4j.logger.org.apache.kafka=WARN
log4j.logger.org.apache.zookeeper=WARN
log4j.logger.org.apache.hadoop=WARN
log4j.logger.org.apache.hadoop.hbase=WARN
log4j.logger.org.apache.phoenix=WARN
# Но оставим информацию о репликации HBase видимой
# log4j.logger.org.apache.hadoop.hbase.replication=INFO

# --- Видимость событий репликации, но без избыточного шума ---
log4j.logger.org.apache.hadoop.hbase.replication=INFO
# Для детальной отладки временно включайте:
# log4j.logger.org.apache.hadoop.hbase.replication=DEBUG

# Точечные переключатели DEBUG для наших классов (раскомментируйте по необходимости)
# log4j.logger.kz.qazmarka.h2k.endpoint.KafkaReplicationEndpoint=DEBUG
# log4j.logger.kz.qazmarka.h2k.kafka.BatchSender=DEBUG
# log4j.logger.kz.qazmarka.h2k.kafka.TopicEnsurer=DEBUG
# log4j.logger.kz.qazmarka.h2k.schema.ValueCodecPhoenix=DEBUG
# log4j.logger.kz.qazmarka.h2k.config.H2kConfig=DEBUG
# log4j.logger.kz.qazmarka.h2k.payload.PayloadBuilder=DEBUG
# log4j.logger.kz.qazmarka.h2k.schema.JsonSchemaRegistry=DEBUG
# log4j.logger.kz.qazmarka.h2k.schema.RowKeySlice=DEBUG

# === (Опционально) Асинхронная консоль для снижения влияния логов на горячий путь ===
# Включайте только если stdout не является критическим каналом синхронной диагностики
#log4j.appender.async=org.apache.log4j.AsyncAppender
#log4j.appender.async.BufferSize=1024
#log4j.appender.async.AppenderRef=h2k_stdout
#log4j.logger.kz.qazmarka.h2k=INFO,async