package kz.qazmarka.h2k.payload.serializer;

import java.util.Map;

/**
 * Контракт стратегии сериализации корневой карты payload в бинарное представление
 * (для Kafka value и/или других каналов доставки). Реализации могут быть
 * JSONEachRow, Avro и т.п.
 *
 * Гарантии и ожидания:
 * - Неизменяемость входа: метод не модифицирует переданную карту;
 * - Потокобезопасность: реализации обязаны быть потокобезопасными и не хранить
 *   изменяемое состояние между вызовами;
 * - Порядок полей: если вызывающая сторона передаёт {@code LinkedHashMap},
 *   реализация должна сохранять порядок итерации ключей (если формат это допускает);
 * - Ошибки сериализации: при невозможности сериализовать значение допустимо
 *   выбрасывать {@link IllegalArgumentException} или {@link IllegalStateException};
 * - Кодировка: определяется реализацией (например, UTF‑8 для JSON);
 * - Назначение: возвращаемый массив байт пригоден для публикации как
 *   value продьюсера Kafka без дополнительной обработки.
 */
public interface PayloadSerializer {

    /**
     * Сериализует корневую карту (ключи — квалификаторы колонок и/или метаданные таблицы),
     * формируя бинарный payload для отправки.
     *
     * @param obj корневой объект; допускается {@code Map} с любыми значениями,
     *            однако конкретная реализация может поддерживать лишь подмножество типов
     *            (см. её JavaDoc). Значение не {@code null}.
     * @return байтовый массив результата (не {@code null})
     * @throws IllegalArgumentException если встречен неподдерживаемый тип значения
     * @throws IllegalStateException    при внутренней ошибке сериализации
     */
    byte[] serialize(Map<String, ?> obj);

    /**
     * Логическое имя формата (стабильный, машиночитаемый идентификатор), напр.:
     * {@code "json-each-row"}, {@code "avro"}.
     *
     * Рекомендуется использовать строчные имена и дефис в качестве разделителя.
     *
     * @return имя формата (не {@code null})
     */
    String format();

    /**
     * MIME-тип полезной нагрузки — полезно для диагностики и установки заголовков
     * (например, {@code Content-Type} или Kafka header). По умолчанию бинарные данные.
     *
     * Реализации могут переопределить, например:
     * - JSONEachRow → {@code application/json; charset=UTF-8}
     * - Avro        → {@code application/avro}
     *
     * @return строка с MIME-типом (не {@code null})
     */
    default String contentType() { return "application/octet-stream"; }
}
